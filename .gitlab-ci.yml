default:
  tags:
    - runner_CRIM

stages:
  - build
  - tag
  - deploy
  - cleanup

variables:
  LOCAL_WP_PLUGINS_DIR: "dockerfiles/mounts/wp-plugins"
  DOCKER_IMAGE_TASK_RUNNER: "task_runner"
  DOCKER_IMAGE_PORTAL: "$DOCKER_REGISTRY/portal"

.validate-deployment-tag:
  rules:
  - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG != "preprod" && $CI_COMMIT_TAG != "uat" && $CI_COMMIT_TAG !~ /v[0-9]+\.[0-9]+\.[0-9]+/
    variables:
      DEPLOYMENT_TAG: "qa-test"
      INSTANCE_NAME: "QA"
      INSTANCE_USER: $INSTANCE_USER_QA
      INSTANCE_IP: $INSTANCE_IP_QA

  - if: $CI_COMMIT_TAG == "uat" && $CI_JOB_STAGE != "build"
    variables:
      DEPLOYMENT_TAG: "uat-test"
      INSTANCE_NAME: "UAT"
      INSTANCE_USER: $INSTANCE_USER_UAT
      INSTANCE_IP: $INSTANCE_IP_UAT

  - if: $CI_COMMIT_TAG == "preprod" && $CI_JOB_STAGE != "build"
    variables:
      DEPLOYMENT_TAG: "preprod-test"
      INSTANCE_NAME: "PreProd"
      INSTANCE_USER: $INSTANCE_USER_PREPROD
      INSTANCE_IP: $INSTANCE_IP_PREPROD

  - if: $CI_COMMIT_TAG =~ /v[0-9]+\.[0-9]+\.[0-9]+/ && $CI_JOB_STAGE == "tag"
    variables:
      DEPLOYMENT_TAG: ${CI_COMMIT_TAG}-test

.log-macros: &log-macros
  # The `log_section_start` and `log_section_end` functions are to create
  # collapsible sections in the GitLab CI/CD job log.
  # See https://docs.gitlab.com/ci/jobs/job_logs/#custom-collapsible-sections
  - |
    # Define text formatting macros
    TXT_INFO="\e[94m"
    TXT_ERROR="\e[91m"
    TXT_CLEAR="\e[0m"

    function log_info() {
      echo -e "${TXT_INFO}$1${TXT_CLEAR}"
    }

    function log_error() {
      echo -e "${TXT_ERROR}$1${TXT_CLEAR}"
    }

    function log_section_start() {
      section_id="$1"
      section_name="${TXT_INFO}$2${TXT_CLEAR}"
      echo -e "\e[0Ksection_start:`date +%s`:${section_id}\r\e[0K$section_name"
    }

    function log_section_end() {
      section_id="$1"
      echo -e "\e[0Ksection_end:`date +%s`:${section_id}\r\e[0K"
    }

build-push-portal-image:
  stage: build
  extends: .validate-deployment-tag

  before_script:
  - *log-macros
  - log_section_start task_runner_build "Building Task Runner image"
  - docker build -f dockerfiles/build/task-runner/Dockerfile -t $DOCKER_IMAGE_TASK_RUNNER .
  - log_section_end task_runner_build
  - >
    log_section_start assets_download "Downloading Docker assets from: $DOCKER_ASSETS_URL"
  - mkdir -p $LOCAL_WP_PLUGINS_DIR
  -
    dockerfiles/tools/download-docker-assets.sh
    $DOCKER_ASSETS_URL
    --username=$DOCKER_ASSETS_USERNAME
    --password-file=$DOCKER_ASSETS_PASSWORD_FILE
  - log_section_end assets_download
  - echo $DOCKER_DEPLOY_TOKEN | docker login -u $DOCKER_DEPLOY_USER $DOCKER_REGISTRY --password-stdin

  script:
  - log_section_start portal_build "Building Portal image"
  - >
    log_info "Image will be tagged with commit SHA: $CI_COMMIT_SHORT_SHA"
  - >
    docker build
    --target production
    --build-arg TASK_RUNNER_IMAGE=$DOCKER_IMAGE_TASK_RUNNER
    --build-arg LOCAL_WP_PLUGINS_DIR=$LOCAL_WP_PLUGINS_DIR
    -t $DOCKER_IMAGE_PORTAL
    .
  - docker image tag $DOCKER_IMAGE_PORTAL $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA
  - log_section_end portal_build
  - log_section_start portal_push "Pushing Portal image"
  - docker push $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA
  - log_section_end portal_push

  after_script:
  - docker logout $DOCKER_REGISTRY

tag-image:
  stage: tag
  extends: .validate-deployment-tag

  before_script:
  - *log-macros
  - echo $DOCKER_DEPLOY_TOKEN | docker login -u $DOCKER_DEPLOY_USER $DOCKER_REGISTRY --password-stdin

  script:
  - >
    log_section_start portal_pull "Pulling the Portal image tagged with commit's SHA: $CI_COMMIT_SHORT_SHA"
  - >
    docker pull $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA
    || {
      log_error "Cannot find a Docker image tagged with the current commit's SHA. See https://ccdpwiki.atlassian.net/wiki/spaces/CCDP/pages/2482110477/Portal+CI+CD+pipelines#Troubleshoot";
      exit 1;
    }
  - log_section_end portal_pull
  - >
    log_section_start portal_env_tag_push "Adding tag '$DEPLOYMENT_TAG' and pushing image"
  - docker image tag $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA $DOCKER_IMAGE_PORTAL:$DEPLOYMENT_TAG
  - docker push $DOCKER_IMAGE_PORTAL:$DEPLOYMENT_TAG
  - log_section_end portal_env_tag_push

  after_script:
  - docker logout $DOCKER_REGISTRY

update-instance:
  stage: deploy
  extends: .validate-deployment-tag

  before_script:
  - *log-macros
  - echo $SSH_PRIVATE_KEY | base64 --decode > ~/.ssh/ccdp_deploy
  - chmod 600 ~/.ssh/ccdp_deploy

  script:
  - >
    log_info "Deploying to: $INSTANCE_NAME"
  - >
    echo
    ssh
    -o UserKnownHostsFile=/dev/null
    -o StrictHostKeyChecking=no
    -i ~/.ssh/ccdp_deploy
    \$INSTANCE_USER@\$INSTANCE_IP
    app-manager restart

  after_script:
  - rm -f ~/.ssh/ccdp_deploy

cleanup:
  stage: cleanup
  rules:
    - if: '$TASK == "docker-registry-cleanup"'

  script:
  - >
    python3 cicd/docker-registry-cleanup.py
    $REGISTRY_CLEANUP_API_URL
    --token $REGISTRY_CLEANUP_TOKEN
    --project-id $REGISTRY_CLEANUP_PROJECT_ID
    --nb-to-keep $REGISTRY_CLEANUP_NB_OF_TAGS_TO_KEEP
    --yes
