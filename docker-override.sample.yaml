# This file contains overrides to the docker-compose-dev.yaml file. It's
# intended to contain configurations specific to your environment.
#
# At the minimum:
# * You must either mount SSL certificates to allow HTTPS, or mount the
#   "non-ssl" ningx configuration to disable SSL.
# * If you want to rebuild the Portal image, you must specify the
#   `LOCAL_WP_PLUGINS_DIR` build argument.
#
# See below for examples (and later in this file for other recipes):

services:
  portal:
  # build:
  #   args:
  #     LOCAL_WP_PLUGINS_DIR: dockerfiles/mounts/wp-plugins

  # IF you want to mainly serve over HTTPS (with HTTP redirected to HTTPS):
  # Specify SSL certificates (put your SSL certificates in the directory below)
  # and open port 443
  #
  # volumes:
  #   - type: bind
  #     source: dockerfiles/mounts/ssl
  #     target: /etc/nginx/ssl
  # ports:
  #   - "443:443"
  #   - "80:80"  # Requests to port 80 will simply redirect the user to HTTPS

  # IF you want to serve ONLY over HTTP:
  # Disable forced HTTPS and open port 80.
  #
  # volumes:
  #   - type: bind
  #     source: dockerfiles/dev/www/configs/nginx/climatedata-site-no-ssl.conf
  #     target: /etc/nginx/sites-available/climatedata-site.conf
  # ports:
  #   - "80:80"

##########
# RECIPES
##########
#
# The following are example overrides for different scenarios.
#
###
# Scenario:
#   Proxy all requests to missing files in assets/uploads/ to the staging server.
#
# Solution:
#
# services:
#   portal:
#     volumes:
#       - type: bind
#         source: dockerfiles/dev/www/configs/nginx/site-extra/proxy-uploads.conf
#         target: /etc/nginx/conf.d/climatedata-site/proxy-uploads.conf
#
###
# Scenario:
#   Add custom nginx or site configurations.
#
# Solution:
#   * Nginx global configurations can be mounted inside `/etc/nginx/conf.d/` and
#     will be automatically loaded.
#   * Custom configurations to be added inside the `server` block of the site's
#     configuration can be mounted inside `/etc/nginx/conf.d/climatedata-site/`.
#     They will be automatically loaded.
#
# services:
#   portal:
#     volumes:
#       - type: bind
#         source: dockerfiles/mounts/config/my-nginx-config.conf
#         target: /etc/nginx/conf.d/my-nginx-config.conf
#       - type: bind
#         source: dockerfiles/mounts/config/my-climatedata-config.conf
#         target: /etc/nginx/conf.d/climatedata-site/my-climatedata-config.conf
#
###
# Scenario:
#   Add custom PHP configuration.
#
# Solution:
#   Custom ini configuration files can be mounted inside /usr/local/etc/php/conf.d/,
#   and will be automatically loaded.
#
# services:
#   portal:
#     volumes:
#       - type: bind
#         source: dockerfiles/mounts/config/my-php-config.ini
#         target: /usr/local/etc/php/conf.d/my-php-config.ini
#
###
# Scenario:
#   Change a WordPress constant.
#
# Solution:
#   Create environment variables for WordPress constants by prefixing the
#   constant with `WP_`.
#   Note that booleans must be quoted, to not be misinterpreted by the YAML
#   parser.
#
# services:
#   portal:
#     environment:
#       WP_DB_HOST: my-custom-db
#       WP_WP_DEBUG: "false"
#
###
