default:
  tags:
    - runner_CRIM

stages:
  - build
  - tag
  - deploy

variables:
  PLUGINS_PATH: "dockerfiles/mounts/wp-plugins"
  DOCKER_IMAGE_TASK_RUNNER: "task_runner"
  DOCKER_IMAGE_PORTAL: "$DOCKER_IMAGE_REGISTRY/portal"

.validate-deployment-tag:
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG != "preprod" && $CI_COMMIT_TAG != "uat"
      variables:
        DEPLOYMENT_TAG: "qa"
        INSTANCE_USER: $QA_INSTANCE_USER
        INSTANCE_IP: $QA_INSTANCE_IP

    - if: $CI_COMMIT_TAG == "uat"
      variables:
        DEPLOYMENT_TAG: "uat"
        INSTANCE_USER: $UAT_INSTANCE_USER
        INSTANCE_IP: $UAT_INSTANCE_IP

    - if: $CI_COMMIT_TAG == "preprod"
      variables:
        DEPLOYMENT_TAG: "preprod"
        INSTANCE_USER: $PREPROD_INSTANCE_USER
        INSTANCE_IP: $PREPROD_INSTANCE_IP

build-push-portal-image:
  stage: build
  extends: .validate-deployment-tag

  before_script:
  - docker build -f dockerfiles/build/task-runner/Dockerfile -t $DOCKER_IMAGE_TASK_RUNNER .
  - mkdir $PLUGINS_PATH
  - >
    plugins=$(grep -v -e '^\s*$' -e '^#' ./dockerfiles/build/www/wp-plugins/local.txt);
    for plugin in $plugins;
    do
        curl \
          --header "JOB-TOKEN: $CI_JOB_TOKEN" \
          --location "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/wp-plugins/1.0.0/$plugin" \
          --output $PLUGINS_PATH/$plugin;
    done

  script:
  - echo $DOCKER_IMAGE_REGISTRY
  - echo $DOCKER_IMAGE_PORTAL
  - >
    docker build
    --target production
    --build-arg TASK_RUNNER_IMAGE=$DOCKER_IMAGE_TASK_RUNNER
    --build-arg LOCAL_WP_PLUGINS_DIR=$PLUGINS_PATH
    -t $DOCKER_IMAGE_PORTAL
    .
  - echo $DOCKER_DEPLOY_TOKEN | docker login -u $DOCKER_DEPLOY_USER $DOCKER_IMAGE_REGISTRY --password-stdin
  - docker image tag $DOCKER_IMAGE_PORTAL $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA
  - docker push $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA

tag-image:
  stage: tag
  extends: .validate-deployment-tag

  script:
  - echo $DOCKER_DEPLOY_TOKEN | docker login -u $DOCKER_DEPLOY_USER $DOCKER_IMAGE_REGISTRY --password-stdin
  - docker pull $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA
  - docker image tag $DOCKER_IMAGE_PORTAL:$CI_COMMIT_SHORT_SHA $DOCKER_IMAGE_PORTAL:$DEPLOYMENT_TAG
  - docker push $DOCKER_IMAGE_PORTAL:$DEPLOYMENT_TAG

update-instance:
  stage: deploy
  extends: .validate-deployment-tag

  before_script:
  - >
    if [ ! -f ~/.ssh/known_hosts ]; then
      touch ~/.ssh/known_hosts;
      chmod 644 ~/.ssh/known_hosts;
    fi
  - export INSTANCE_HOST="$(ssh-keyscan -t rsa,ed25519 $INSTANCE_IP)"
  - >
    if ! grep -q $INSTANCE_HOST ~/.ssh/known_hosts; then
      $INSTANCE_HOST >> ~/.ssh/known_hosts;
    fi

  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - rm ~/.ssh/ccdp_deploy
  - touch ~/.ssh/ccdp_deploy
  - chmod 700 ~/.ssh/ccdp_deploy
  - echo $SSH_PRIVATE_KEY | base64 --decode > ~/.ssh/ccdp_deploy
  script:
  - eval "$(ssh-agent)"
  - ssh-add -k ~/.ssh/ccdp_deploy
  - ssh $INSTANCE_USER@$INSTANCE_IP app-manager restart

